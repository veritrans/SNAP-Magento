<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
$token = Mage::getSingleton('checkout/session')->getToken();
$_order = new Mage_Sales_Model_Order();
$orderId = Mage::getSingleton('checkout/session')->getLastRealOrderId();
$env = Mage::getSingleton('checkout/session')->getEnv();
error_log($env);

$env = Mage::getStoreConfig('payment/snapspec/environment');
$mixpanel_key = $env == "production" ? "17253088ed3a39b1e2bd2cbcfeca939a" : "9dcba9b440c831d517e8ff1beff40bd9";
$client_key = Mage::getStoreConfig('payment/snapspec/client_key');
$merchant_id = Mage::getStoreConfig('payment/snapspec/merchant_id');

$order = Mage::getModel('sales/order')->loadByIncrementId($orderId);
//print_r($order);
Mage::log($token . $client_key . $merchant_id, null, 'snap.log', true);
?>

<style>
</style>

<div class="page-title">
    <h1>Your order has been received.</h1>
</div>

<div class="box">
    <div class="box-content">
        <?php
        if ($env == 'production') {
            ?>
            <script src="https://app.midtrans.com/snap/snap.js"></script>
        <?php
        }
        else{
        ?>
            <script src="https://app.sandbox.midtrans.com/snap/snap.js"></script>
            <?php
        }
        ?>

        <div id="result-type"></div>
        <div id="result-data"></div>
        <div id="status-message"></div>
        <div id="status"></div>
        <div id="additional-info"></div>
    </div>
</div>

<div class="buttons-set">
    <button type="button" title="Continue Shopping" class="button btn-continue"
            onclick="window.location='<?php echo $this->getUrl() ?>'"><span><span>Continue Shopping</span></span>
    </button>
</div>
<script type="text/javascript">
    var snapToken = "<?=$token?>";
    var merchantId = "<?=$merchant_id?>";
    var mixpanelKey = "<?=$mixpanel_key?>";
    var baseUrl = "<?=$base_url?>";

    (function (e, a) {
        if (!a.__SV) {
            var b = window;
            try {
                var c, l, i, j = b.location,
                    g = j.hash;
                c = function (a, b) {
                    return (l = a.match(RegExp(b + "=([^&]*)"))) ? l[1] : null
                };
                g && c(g, "state") && (i = JSON.parse(decodeURIComponent(c(g, "state"))), "mpeditor" === i.action && (b.sessionStorage.setItem("_mpcehash", g), history.replaceState(i.desiredHash || "", e.title, j.pathname + j.search)))
            } catch (m) {
            }
            var k, h;
            window.mixpanel = a;
            a._i = [];
            a.init = function (b, c, f) {
                function e(b, a) {
                    var c = a.split(".");
                    2 == c.length && (b = b[c[0]], a = c[1]);
                    b[a] = function () {
                        b.push([a].concat(Array.prototype.slice.call(arguments,
                            0)))
                    }
                }

                var d = a;
                "undefined" !== typeof f ? d = a[f] = [] : f = "mixpanel";
                d.people = d.people || [];
                d.toString = function (b) {
                    var a = "mixpanel";
                    "mixpanel" !== f && (a += "." + f);
                    b || (a += " (stub)");
                    return a
                };
                d.people.toString = function () {
                    return d.toString(1) + ".people (stub)"
                };
                k = "disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config reset people.set people.set_once people.increment people.append people.union people.track_charge people.clear_charges people.delete_user".split(" ");
                for (h = 0; h < k.length; h++) e(d, k[h]);
                a._i.push([b, c, f])
            };
            a.__SV = 1.2;
            b = e.createElement("script");
            b.type = "text/javascript";
            b.async = !0;
            b.src = "undefined" !== typeof MIXPANEL_CUSTOM_LIB_URL ? MIXPANEL_CUSTOM_LIB_URL : "file:" === e.location.protocol && "//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js".match(/^\/\//) ? "https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js" : "//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";
            c = e.getElementsByTagName("script")[0];
            c.parentNode.insertBefore(b, c)
        }
    })(document, window.mixpanel || []);

    mixpanel.init(mixpanelKey);

    function trackResult(token, merchant_id, plugin_name, status, result) {
        console.log("called trackResult");
        var eventNames = {
            pay: 'pg-pay',
            success: 'pg-success',
            pending: 'pg-pending',
            error: 'pg-error',
            close: 'pg-close'
        };
        mixpanel.track(
            eventNames[status], {
                merchant_id: merchant_id,
                cms_name: 'Magento',
                cms_version: '1.9',
                plugin_version: '1.1.2',
                plugin_name: plugin_name,
                snap_token: token,
                payment_type: result ? result.payment_type : null,
                order_id: result ? result.order_id : null,
                status_code: result ? result.status_code : null,
                gross_amount: result && result.gross_amount ? Number(result.gross_amount) : null,
            }
        );
    }

    var resultType = document.getElementById('result-type');
    var resultData = document.getElementById('result-data');
    var statusMessage = document.getElementById('status-message');
    var paymentStatus = document.getElementById('status');
    var additionalInfo = document.getElementById('additional-info');

    function changeResult(type, data) {
        console.log(JSON.stringify(data));
        statusMessage.innerHTML = "<h2 class='sub-title'>" + data.status_message + "</h2>";
        paymentStatus.innerHTML = "<p>Payment status : <b>" + data.transaction_status + "</b></p>";

        if (data.payment_type == "bank_transfer") {
            console.log("payment == bank transfer");
            if (data.bca_va_number != null) {

                additionalInfo.innerHTML = "<p>BCA va number : <b>" + data.va_numbers['0'].va_number + "</b></p><p>Payment Instruction : <a href=" + data.pdf_url + " target ='blank'>" + "Click here" + "</a></p>";
            } else {

                additionalInfo.innerHTML = "<p>va number : <b>" + data.permata_va_number + "</b></p><p>Payment Instruction : <a href=" + data.pdf_url + " target ='blank'>" + "Click here" + "</a></p>";
            }

        } else if (data.payment_type == "echannel") {

            additionalInfo.innerHTML = "<p>Payment code : <b>" + data.bill_key + "</b></p><p>Company code : <b>" + data.biller_code + "</b></p><p>Payment Instruction : <a href=" + data.pdf_url + " target ='blank'>" + "Click here" + "</a></p>";

        } else if (data.payment_type == "cstore") {

            additionalInfo.innerHTML = "<p>Payment code : <b>" + data.payment_code + "</b></p><p>Payment Instruction : <a href=" + data.pdf_url + " target ='blank'>" + "Click here" + "</a></p>";

        }

    }

    trackResult(snapToken, merchantId, 'bin_promo', 'pay', null);

    snap.pay(snapToken, {

        onSuccess: function (result) {
            trackResult(snapToken, merchantId, 'bin_promo', 'success', result);
            changeResult('success', result);
            console.log(result.status_message);

        },
        onPending: function (result) {
            trackResult(snapToken, merchantId, 'bin_promo', 'pending', result);
            changeResult('pending', result);
            console.log(result.status_message);

        },
        onError: function (result) {
            trackResult(snapToken, merchantId, 'bin_promo', 'error', result);
            changeResult('error', result);
            console.log(result.status_message);

        },
        onClose: function () {
            trackResult(snapToken, merchantId, 'bin_promo', 'close');
            console.log('customer closed the popup without finishing the payment');
            window.location.replace(baseUrl);
        }

    });


</script>